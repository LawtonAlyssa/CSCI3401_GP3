/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.sql.Timestamp;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.Timer;

/**
 *
 * @author aml05
 */
public class ChatGUI extends javax.swing.JFrame {

    /**
     * Creates new form SimpleChattingRoom
     */
    public ChatGUI() throws InterruptedException {
        initComponents();
             
        jTextArea_input.setEnabled(false);
        jButton_broadcast.setEnabled(false);
        jTextArea_chat.setEnabled(false);
        jButton_send.setEnabled(false);
        
        jList_all_clients.setModel(new DefaultListModel()); // clears list
        jList_all_clients.setEnabled(false);
        jButton_chat.setEnabled(false);
        
        jButton_leave_server.setEnabled(false);        
    }
    
    private Socket serverSocket = null;
    private PrintWriter serverOut = null;
    private BufferedReader serverIn = null;
    private NetworkInfo clientNetworkInfo;
//    private LinkedBlockingQueue<String> queue = new LinkedBlockingQueue<>();
    private boolean enableKeyboard = false;
    private ArrayList<String> clientRecipients = new ArrayList<>();
    private File file = null;
    private boolean inChat = false;
    private boolean inServer = false;
    
//    private String[] clients;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel_chat = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_chat = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea_input = new javax.swing.JTextArea();
        jButton_send = new javax.swing.JButton();
        jButton_broadcast = new javax.swing.JButton();
        jPanel_chat1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList_all_clients = new javax.swing.JList<>();
        jButton_chat = new javax.swing.JButton();
        jTextField_ip = new javax.swing.JTextField();
        jLabel_ip = new javax.swing.JLabel();
        jButton_server = new javax.swing.JButton();
        jButton_leave_server = new javax.swing.JButton();
        jLabel_error = new javax.swing.JLabel();
        jLabel_port_num = new javax.swing.JLabel();
        jTextField_port_num = new javax.swing.JTextField();
        jLabel_no_clients = new javax.swing.JLabel();
        jLabel_chat_notification = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel_chat.setBorder(javax.swing.BorderFactory.createTitledBorder("Chatting Room"));

        jTextArea_chat.setColumns(20);
        jTextArea_chat.setRows(5);
        jScrollPane1.setViewportView(jTextArea_chat);

        jTextArea_input.setColumns(20);
        jTextArea_input.setRows(5);
        jScrollPane3.setViewportView(jTextArea_input);

        jButton_send.setBackground(new java.awt.Color(204, 204, 255));
        jButton_send.setText("send");
        jButton_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_sendActionPerformed(evt);
            }
        });

        jButton_broadcast.setBackground(new java.awt.Color(204, 204, 255));
        jButton_broadcast.setText("broadcast");
        jButton_broadcast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_broadcastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_chatLayout = new javax.swing.GroupLayout(jPanel_chat);
        jPanel_chat.setLayout(jPanel_chatLayout);
        jPanel_chatLayout.setHorizontalGroup(
            jPanel_chatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_chatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_chatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel_chatLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel_chatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_broadcast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel_chatLayout.setVerticalGroup(
            jPanel_chatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_chatLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel_chatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_chatLayout.createSequentialGroup()
                        .addComponent(jButton_send)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_broadcast)))
                .addContainerGap())
        );

        jPanel_chat1.setBorder(javax.swing.BorderFactory.createTitledBorder("All Available Clients"));

        jList_all_clients.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList_all_clients);

        jButton_chat.setText("request");
        jButton_chat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_chatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_chat1Layout = new javax.swing.GroupLayout(jPanel_chat1);
        jPanel_chat1.setLayout(jPanel_chat1Layout);
        jPanel_chat1Layout.setHorizontalGroup(
            jPanel_chat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_chat1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
            .addGroup(jPanel_chat1Layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(jButton_chat)
                .addContainerGap(154, Short.MAX_VALUE))
        );
        jPanel_chat1Layout.setVerticalGroup(
            jPanel_chat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_chat1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton_chat)
                .addContainerGap())
        );

        jTextField_ip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_ipActionPerformed(evt);
            }
        });

        jLabel_ip.setText("IP Address:");

        jButton_server.setText("join");
        jButton_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_serverActionPerformed(evt);
            }
        });

        jButton_leave_server.setBackground(new java.awt.Color(255, 102, 102));
        jButton_leave_server.setText("leave server");
        jButton_leave_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_leave_serverActionPerformed(evt);
            }
        });

        jLabel_error.setForeground(new java.awt.Color(255, 51, 51));
        jLabel_error.setText("No error(s)");

        jLabel_port_num.setText("Port Number:");

        jTextField_port_num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_port_numActionPerformed(evt);
            }
        });

        jLabel_no_clients.setForeground(new java.awt.Color(255, 51, 51));
        jLabel_no_clients.setText("No clients");

        jLabel_chat_notification.setForeground(new java.awt.Color(255, 51, 51));
        jLabel_chat_notification.setText("Chat notification");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel_chat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel_chat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel_error)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel_ip)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jTextField_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel_port_num)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jTextField_port_num)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton_server, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10)))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel_no_clients)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton_leave_server)
                                .addGap(39, 39, 39))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_chat_notification)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_leave_server)
                    .addComponent(jLabel_no_clients))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel_chat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_ip))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_port_num)
                    .addComponent(jTextField_port_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_server))
                .addGap(7, 7, 7)
                .addComponent(jLabel_error)
                .addGap(160, 160, 160))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_chat_notification)
                .addGap(18, 18, 18)
                .addComponent(jPanel_chat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton_sendActionPerformed(java.awt.event.ActionEvent evt) {                                             
        try {
            String input = jTextArea_input.getText();
            sendOut("msg", getMessage(input));
            jTextArea_chat.append("\n" + clientNetworkInfo.getName() + ": " + input);
            jTextArea_input.setText("");
        } catch (IOException e) {
            jLabel_error.setText(e.getMessage());
        }
    }                                            

    private void jButton_leave_serverActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        try {
            jLabel_chat_notification.setText("Leaving server...");
            sendOut("leave_server","");
            System.exit(0);
        } catch (IOException ex) {
            Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }                                                    

    private void jButton_chatActionPerformed(java.awt.event.ActionEvent evt) {                                             
        try {
            if (inChat){
                if (!clientRecipients.isEmpty()) {
                    sendOut("leave", getMessage(""));
                    jButton_send.setEnabled(false);
                    jButton_chat.setText("request");
                    clientRecipients = new ArrayList<>(); //clears Recipeints
                }
                else {
                    jLabel_error.setText("Unexpected Error: Cannot leave chat without recipients.");
                }
            } else {
                if (!clientRecipients.isEmpty()) {
                    jLabel_error.setText("Cannot request during conversation.");
                    return;
                }

                int selectedIndex = jList_all_clients.getSelectedIndex();
                if (selectedIndex>=0){
                    ListModel<String> model = jList_all_clients.getModel();
                    String clientName = model.getElementAt(selectedIndex).split("\\|")[1].trim();
                    sendOut("request", clientName);
                } else {
                    jLabel_error.setText("Error: Select client before requesting.");
                }
            }
        } catch (IOException ex) {
            jLabel_error.setText("Error: " + ex.getMessage());
        }
    }                                            

    private void jTextField_ipActionPerformed(java.awt.event.ActionEvent evt) {                                              
        
    }                                             

    private void jTextField_port_numActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void jButton_serverActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if (inServer) {
            try {
                jLabel_chat_notification.setText("Socket will be closed!");
                sendOut("close", "");
                System.exit(0);
            } catch (IOException ex) {
                Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String ipAddr = jTextField_ip.getText();
            int portNum = 12345;

            try{
                portNum = Integer.parseInt(jTextField_port_num.getText());
            } catch (Exception e) {
                jLabel_error.setText("Port Number must be an integer value.");
            }

            String name;
            try {
                clientNetworkInfo = new NetworkInfo("", ipAddr, portNum);

                setServerIO(new String[0]);
                
                inServer = true;
                jButton_server.setText("terminate");
                jLabel_error.setVisible(true);

                jList_all_clients.setModel(new DefaultListModel()); // clears list
                jList_all_clients.setEnabled(true);

                jTextArea_input.setEnabled(true);
                jButton_broadcast.setEnabled(true);

                jButton_chat.setEnabled(true);

                jButton_leave_server.setEnabled(true);

                name = getClientName("Enter your name");
                serverOut.println("client_info-" + getClientInfoStr(name));            
                startTimer();

            } catch (Exception e) {
                jLabel_error.setText(e.getMessage());
            }             

        }
        
    }                                              

    private void jButton_broadcastActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        try {
            String input = jTextArea_input.getText();
            sendOut("broadcast", input);
            jTextArea_chat.append("\n" + clientNetworkInfo.getName() + ": " + input);
            jTextArea_input.setText("");
        } catch (IOException ex) {
            jLabel_error.setText("Error:" + ex.getMessage());
        }
        
    }                                                 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ChatGUI().setVisible(true);
                } catch (InterruptedException ex) {
                    System.out.println(ex.getMessage());
                }
            }
        });
        
    }
    
    public String getClientName(String msg) {
        return JOptionPane.showInputDialog(msg);
    }
    
    public int getRequestResponse(String name) {
        return JOptionPane.showConfirmDialog(null, "Would you like to talk with " + name + "?", "Request Response", JOptionPane.YES_NO_OPTION);
    }
    
    public String getClientInfoStr(String name) {
        return name  + ":" + clientNetworkInfo.getIpAddr() + ":" + clientNetworkInfo.getPortNum();
    }
    
    public void clearFile() throws FileNotFoundException {
        PrintWriter pw = new PrintWriter(file.getPath());
        pw.print("");
        pw.close();
    }
    
    public String getMessage(String msg) {
        // println("RECIPIENTS:" + clientRecipients);
        if (!clientRecipients.isEmpty()) return Message.build(clientNetworkInfo.getName(), clientRecipients, msg);
        return null;
    }
    
    public String joinTokens(String[] tokens, char split_char) {
        StringBuilder out = new StringBuilder();
        for (int i = 1; i < tokens.length; i++) {
            out.append(tokens[i]);
            if (i != tokens.length - 1)
                out.append(split_char);
        }
        return out.toString();
    }
    
    public void printAllClients(String input) throws NumberFormatException, UnknownHostException {
        jLabel_no_clients.setText("");
        String[] clients = input.split(";");
        if (clients.length == 1) {
            jLabel_no_clients.setText("No available clients...");
            return;
        }
        DefaultListModel clientList = new DefaultListModel();
        for (String client : clients) {
            String clientName = client.split(":")[0];
            if (!clientName.equals(clientNetworkInfo.getName())) 
                clientList.addElement(ServerNetworkInfo.parse(client).displayString());
        }
        
        jList_all_clients.setModel(clientList);
    }
    
    public boolean handleServerInput(String serverInput) throws IOException, InterruptedException {
        if (file!=null) receivedIn(serverInput);
        Message msg = Message.parse(serverInput);
        boolean exit = false;
        String outLabel = msg.getLabel(), outContent = "";
        String[] tokens;
        System.out.println("ECHO:" + serverInput);
        switch (msg.getLabel()) {
            case "client_info":
                // allows client to reenter name
                outContent = getClientInfoStr(getClientName("Name is unavailable. Please enter a new name"));
                serverOut.println(outLabel + "-" + outContent);
                break;
            case "success":
                clientNetworkInfo.setName(msg.getContent().split(";")[0]);
                int clientNum = Integer.parseInt(msg.getContent().split(";")[1]);
                file = new File(String.format("client_logs/client%d.log", clientNum));
                clearFile();
                sendOut("print_clients", "");
                break;
            case "join":
                sendOut("print_clients", "");
                jLabel_chat_notification.setText(msg.getContent() + " has entered the server.");
                break;
            case "print_clients":
                printAllClients(msg.getContent());
                break;
            case "leave":
                jLabel_chat_notification.setText(msg.getContent() + " has left the chat.");
                clientRecipients.remove(msg.getContent());
                jButton_send.setEnabled(false);
                break;
            case "leave_server":
                jLabel_chat_notification.setText(msg.getContent() + " has left the server.");
                if (!clientRecipients.isEmpty()) clientRecipients.remove(msg.getContent()); // ends chat if necessary
                break;
            case "request":
                enableKeyboard = true;
                boolean accept = getRequestResponse(msg.getContent())==0;
                outLabel = "request_resp";
                outContent = clientNetworkInfo.getName() + (accept ? " accept " : " reject " ) + msg.getContent();
                sendOut(outLabel, outContent);
                if(accept){
                    clientRecipients.add(msg.getContent()); // start communication
                    jButton_send.setEnabled(true);
                    jButton_chat.setText("leave");
                    inChat = accept;
                }
                break;
            case "request_resp":
                String name = msg.getContent().split(" ")[0];
                String resp = msg.getContent().split(" ")[1];
                if (resp.equals("reject"))
                    jLabel_chat_notification.setText(name + " rejected your request.");
                else { // accept
                    jLabel_chat_notification.setText(name + " accepted your request.");
                    clientRecipients.add(name); // start communication
                    jButton_send.setEnabled(true);
                    jButton_chat.setText("leave");
                    inChat = true;
                }
                break;
            case "msg":
                tokens = msg.getContent().split("-", 3);
                System.out.println("MESSAGE:" + tokens[0] + ": " + tokens[2]);
                jTextArea_chat.append("\n" + tokens[0] + ": " + tokens[2]);
                break;
            case "broadcast":
                tokens = msg.getContent().split("-", 3);
                jTextArea_chat.append("\n" + tokens[0] + ": " + tokens[2]);
                break;
            case "close":
                jLabel_chat_notification.setText("Sorry, socket will be closed!"); 
                exit = true;
                break;
            case "error":
                jLabel_error.setText("Error: " + msg.getContent());
                System.out.println("SET ERROR1");
                break;
            default:
                break;
        }
        return !exit;
    }

    public void setServerIO(String args[]) {
        String serverHostName = clientNetworkInfo.getIpAddr();
        if (args.length > 0) {
            serverHostName = args[0];
        }
        System.out.println("Attempting to connect to host " + serverHostName + " on port " + 12345 + ".");
        try {
            serverSocket = new Socket(serverHostName, clientNetworkInfo.getPortNum());
            serverOut = new PrintWriter(serverSocket.getOutputStream(), true);
            serverIn = new BufferedReader(new InputStreamReader(serverSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: " + serverHostName);
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for the connection to: " + serverHostName);
            System.exit(1);
        }
    }
    
    public void startTimer() {
        ActionListener taskPerformer = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    communicate();
                } catch (Exception ex) {
                    for (StackTraceElement s:ex.getStackTrace()){
                        System.out.println(s);
                    }
                    ((Timer)evt.getSource()).stop();
                }
            }
        };
        Timer timer = new Timer(100 ,taskPerformer);
        timer.setRepeats(true);
        timer.start();

//        Thread.sleep(5000);
    }
        
    public void communicate() throws IOException, InterruptedException {
//        while (true) {
        /*if (queue.size() > 0 && !enableKeyboard) {
            String userInput = queue.take();
            if (userInput != null) {
                // println("Getting input: " + userInput);
//                if (!handleClientInput(userInput)) close();
            }
        }*/
        
        if (serverIn.ready()) {
            System.out.println("SERVER READY");
            String serverInput = serverIn.readLine();
             System.out.println("SERVER INPUT:" + serverInput);
            if (serverInput != null) {
                if (!handleServerInput(serverInput)) close();
            }
        }
            // Thread.sleep(100);
//        }        
    }
    
    public void receivedIn(String inputLine) throws IOException {
        if (clientNetworkInfo != null) {
            writeToFile("Received from Server: " + inputLine + "\n");
        }
    }

    public void writeToFile(String line) throws IOException {
        FileWriter fw = new FileWriter(new File(file.getPath()), true); //file.getAbsolutePath(), true);
        fw.write(new Timestamp(System.currentTimeMillis()) + "\n" + line);
        fw.close();
    }

    public void sendOut(String label, String content) throws IOException {
        String line = label + "-" + content;
        serverOut.println(line);
        writeToFile("\tClient Sent: " + line + "\n");
    }
    
    public void close() throws IOException {
        serverIn.close();
        serverOut.close();
        serverSocket.close();
        System.exit(0);
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton_broadcast;
    private javax.swing.JButton jButton_chat;
    private javax.swing.JButton jButton_leave_server;
    private javax.swing.JButton jButton_send;
    private javax.swing.JButton jButton_server;
    private javax.swing.JLabel jLabel_chat_notification;
    private javax.swing.JLabel jLabel_error;
    private javax.swing.JLabel jLabel_ip;
    private javax.swing.JLabel jLabel_no_clients;
    private javax.swing.JLabel jLabel_port_num;
    private javax.swing.JList<String> jList_all_clients;
    private javax.swing.JPanel jPanel_chat;
    private javax.swing.JPanel jPanel_chat1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea_chat;
    private javax.swing.JTextArea jTextArea_input;
    private javax.swing.JTextField jTextField_ip;
    private javax.swing.JTextField jTextField_port_num;
    // End of variables declaration                   
}